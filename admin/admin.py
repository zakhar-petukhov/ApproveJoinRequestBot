import asyncio

from telethon import Button
from telethon import events

from admin.settings import Setting
from bot.bot import start
from config import ADMINS_ID
from db.models import User


def admin_panel(bot):
    @bot.on(events.NewMessage(pattern='/admin'))
    async def admin(event):
        user_id = event.sender_id
        if user_id in ADMINS_ID:
            settings = Setting(bot=bot)
            settings.clear_mail()
            await admin_button(bot, user_id)

    @bot.on(events.CallbackQuery(pattern="statistics"))
    async def statistics(event):
        active_users = User.select().where(User.active == True).count()
        text = f"""
–í–æ—Ç –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ –±–æ—Ç–µ:

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{active_users}**
    """
        user_id = event.sender_id
        msg_id = event.message_id

        await bot.edit_message(user_id, message=msg_id, text=text)

    @bot.on(events.CallbackQuery(data="mailing"))
    async def mailing(event):
        user_id = event.sender_id
        await event.delete()

        settings = Setting(bot=bot)
        text = settings.mail_text()

        keyboard = [
            [
                Button.text("‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", resize=True),
                Button.text("üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è", resize=True),
            ],
            [
                Button.text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", resize=True),
                Button.text("üåÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", resize=True),
                Button.text("üñº –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–Ω–∏–∑—É", resize=True),
            ],
            [
                Button.text("üåç –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É", resize=True),
                Button.text("üñ• –í–∫–ª/–≤—ã–∫–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", resize=True),
            ],
            [
                Button.text("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", resize=True),
                Button.text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", resize=True),
            ]
        ]

        await bot.send_message(user_id, text, buttons=keyboard, link_preview=False)

    @bot.on(events.NewMessage)
    async def handler(event):
        settings = Setting(bot=bot)

        user_id = event.sender_id
        if user_id not in ADMINS_ID:
            return

        text = event.raw_text
        if text.lower() == '–æ—Ç–º–µ–Ω–∞':
            await mailing(event)

        keyboard_cancel = [[Button.text("–û—Ç–º–µ–Ω–∞", resize=True)]]

        if text == '/admin':
            return

        elif text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç':
            try:
                async with bot.conversation(user_id, timeout=180) as conv:
                    await conv.send_message('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç', buttons=keyboard_cancel)
                    response = await conv.get_response()
                    text = response.text

                    if text.lower() != '–æ—Ç–º–µ–Ω–∞':
                        settings.change_value('mail.json', 'text', text)
                        settings.change_value('mail.json', 'entities', 'None')
                        settings.change_value('mail.json', 'content', 'False')

            except asyncio.TimeoutError:
                await bot.send_message(user_id, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ")

            await mailing(event)

        elif text == 'üåÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞':
            async with bot.conversation(user_id) as conv:
                await conv.send_message('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ–¥–∏–∞', buttons=keyboard_cancel)
                response = await conv.get_response()
                file_id = response.file.id
                content_type = response.file.mime_type
                if 'video' not in content_type:
                    file = await bot.download_media(response.media, "media")
                    settings.change_value('mail.json', 'media', f'photo:{file}')

                else:
                    settings.change_value('mail.json', 'media', f'{content_type}:{file_id}')

                await mailing(event)

        elif text == 'üñº –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–Ω–∏–∑—É':
            async with bot.conversation(user_id) as conv:
                await conv.send_message('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç (—Ñ–æ—Ç–æ / GIF / –≤–∏–¥–µ–æ)', buttons=keyboard_cancel)
                response = await conv.get_response()

                try:
                    file_id = response.file.id
                except:
                    await event.respond('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Ç —Ñ–∞–π–ª–æ–º')
                    return

                content_type = response.file.mime_type

                await settings.add_content(file_id, content_type)
                settings.change_value('mail.json', 'preview', 'True')

                await mailing(event)

        elif text == 'üåç –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É':
            async with bot.conversation(user_id) as conv:
                await conv.send_message('''–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫—É. 
–ù–∞–ø—Ä–∏–º–µ—Ä `Google - google.ru`''', buttons=keyboard_cancel)
                response = await conv.get_response()
                text = response.text

                if text.lower() != '–æ—Ç–º–µ–Ω–∞':
                    settings.change_value('mail.json', 'button', text)

                await mailing(event)

        elif text == 'üñ• –í–∫–ª/–≤—ã–∫–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä':
            settings.switch_preview()
            await mailing(event)

        elif text == '‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':
            await bot.send_message(user_id, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å")
            await settings.send_mail(preview=False, admin_id=user_id)

        elif text == 'üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è':
            await settings.send_mail(preview=True, admin_id=user_id)

        elif text == 'üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':
            settings.clear_mail()
            await mailing(event)

        elif text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
            settings.clear_mail()
            await start(event)


async def admin_button(bot, user_id):
    buttons = [
        [Button.inline("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", b"statistics")],
        [Button.inline("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", b"mailing")],
    ]

    await bot.send_message(user_id, "–ó–¥–∞—Ä–æ–≤–∞, —Ñ–µ—Ä–º–µ—Ä!", buttons=buttons)
